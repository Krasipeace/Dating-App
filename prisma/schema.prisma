// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Token {
  id      String    @id @default(cuid())
  email   String
  token   String
  expires DateTime
  type    TokenType

  @@unique([email, token])
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?  @map("email_verified")
  passwordHash    String?
  image           String?
  profileComplete Boolean    @default(false)
  role            Role       @default(MEMBER)
  accounts        Account[]
  member          Member?
  AuditLog        AuditLog[]

  @@map("users")
}

enum Role {
  ADMIN
  MEMBER
}

model Member {
  id                String      @id @default(cuid())
  userId            String      @unique
  name              String
  gender            String
  birthDate         DateTime
  created           DateTime    @default(now())
  updated           DateTime    @default(now())
  description       String
  city              String
  country           String
  image             String?
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos            Photo[]
  sourceLikes       Like[]      @relation("source")
  targetLikes       Like[]      @relation("target")
  senderMessages    Message[]   @relation("sender")
  recipientMessages Message[]   @relation("recipient")
  blocksInitiated   BlockUser[] @relation("blocker")
  blocksReceived    BlockUser[] @relation("blocked")
}

model Photo {
  id         String  @id @default(cuid())
  url        String
  isApproved Boolean @default(false)
  publicId   String?
  memberId   String
  member     Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model Like {
  sourceUserId String
  sourceMember Member @relation("source", fields: [sourceUserId], references: [userId], onDelete: Cascade)
  targetUserId String
  targetMember Member @relation("target", fields: [targetUserId], references: [userId], onDelete: Cascade)

  @@id([sourceUserId, targetUserId])
}

model Message {
  id               String    @id @default(cuid())
  text             String
  created          DateTime  @default(now())
  senderId         String?
  recipientId      String?
  sender           Member?   @relation("sender", fields: [senderId], references: [userId], onDelete: SetNull)
  recipient        Member?   @relation("recipient", fields: [recipientId], references: [userId], onDelete: SetNull)
  dateRead         DateTime?
  senderDeleted    Boolean   @default(false)
  recipientDeleted Boolean   @default(false)
  isAbuse          Boolean   @default(false)
}

model BlockUser {
  id        String   @id @default(cuid())
  blockerId String // The user initiating the block
  blocker   Member   @relation("blocker", fields: [blockerId], references: [userId], onDelete: Cascade)
  blockedId String // The user being blocked
  blocked   Member   @relation("blocked", fields: [blockedId], references: [userId], onDelete: Cascade)
  created   DateTime @default(now())
  reason    String?

  @@unique([blockerId, blockedId]) // User cannot block the same person multiple times
  @@map("block_users")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  targetId  String
  adminId   String
  admin     User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  initiated DateTime @default(now())
}
